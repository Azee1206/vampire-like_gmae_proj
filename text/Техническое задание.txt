В начале программы импортируются все модули.

После происходит:
	Определение некоторых цветов,
	кодов кнопок управления.
	Пре-инициализация звукового модуля,
	инициализация визуального модуля,
	установка размеров окна,
	названия окна.
	Определение границ целевого окна,
	границ поля игры,
	общей громкости по умолчанию.

Далее создаётся функция load_volume, после чего сразу же вызывается, выгружая
и устанавливая громкость из файла.

Создаются функции:
	load_image, загружающая изображение с названием name
	из файлов игры и делающая цвет colorkey в нём прозрачным.

	mirror, отражающая изображение по вертикальной оси.
	
	cut_sheet, нарезающая выбранное изображение на его составляющие,
	создавая дополнительно указанную отзеркаленную строку изображений.

	bleach, заменяющая все непрозрачные пиксели на белый цвет.

	greening, заменяющая все непрозрачные пиксели на зелёный цвет.

	load_sound, загружающая звук с названием name, 
	устанавливая ему громкость volume.

	inside, проверяющая вхождение точки в прямоугольную область.

После создаются группы спрайтов.

Далее создаются классы всего, с чем взаимодействует игрок.

Класс Enemy.
    Наследуется от pygame.sprite.Sprite. Отвечает за всех врагов в игре.
    Класс имеет следующие методы:
    	check_for_target - делает проверку на наличие возможности атаковать цель.
    	get_direction - вычисляет угол относительно цели.
    	get_distance - вычисляет расстояние до цели.
	move - перемещает врага в заданном направлении.
    	get_damage - снижает здоровье персонажа на dmg, 
		отбеливает текущее изображение.
	give_exp - даёт игроку опыт при своей смерти.
    	death - уничтожает и удаляет персонажа из игры.
	attack - атакует указанную цель, если может.
	update - обновляет состояние персонажа.

Класс определённого врага.
    Наследуется от класса Enemy. Имеет привязанные спрайты, определённые
    параметры и оружие (иногда оружия нет).
    Класс имеет следующие методы:
    	get_exp - возвращает число опыта за убийство врага, умноженное на
    		модификатор mod.
    	attack - атакует игрока, если соблюдены все условия.
    	special_actions - выполняет особые действия на арене (не для всех).

Класс Bullet.
    Наследуется от pygame.sprite.Sprite. Отвечает за выпускаемые оружием
    снаряды. При инициализации помимо аргументов родительского класса
    Sprite принимает следующие числа: degree, position (два числа), 
    speed, damage, limit, radius, и необязательный аргумент pertain (число, по
    умолчанию = 0).
    Класс имеет следующие методы:
    	move - движение в фиксированном направлении до столкновения или
    		превышения дальности полёта.
	death - уничтожение и удаление объекта из игры.
    	update - обновление состояния, проверка на столкновение.
    	

Класс Weapon.
    Наследуется от pygame.sprite.Sprite. Отвечает за оружие в игре.
    Всё оружие стреляет, выпуская снаряды.
    В качестве аргумента при инициализации принимает владельца.
    Класс имеет метод shoot, отвечающий за выстрел снарядом в
    направлении direction, а также метод update, отвечающий за 
    поворот оружия в руках персонажа в направлении его взгляда.

Класс определённого оружия.
    Наследуется от класса Weapon. Имеет привязанные спрайты и
    определённые параметры.

Класс Player.
    Наследуется от pygame.sprite.Sprite. Отвечает за персонажа игрока.
    Класс имеет следующие методы:
	get_direction - возвращает угол от персонажа относительно цели.
	set_direction - устанавливает направление взгляда игрока, выбирает
		подходящую группу спрайтов.
    	move - совершает движение в соответствии с текущим
		направлениеем движения.
	set_action - устанавливает действие игрока: направление 
		движения или стрельбу на истину или ложь.
    	shoot - выстрел из оружия в направлении direction.
	get_damage - уменьшает текущее здоровье на dmg, 
		проверяя некоторые специальные параметры.
	death - убивает персонажа (и его оружие).
	debug_view - метод, созданный для отладки. Показывает направление 
		взгляда игрока, выводит некоторые числовые параметры 
		игрока на экран. Ныне отключен по ненадобности.
	get_position - возвращает середину спрайта персонажа.
	get_health - возвращает долю здоровья от максимального.
	get_experience - возвращает долю опыта от нужного для следующего уровня.
	upgrade - будет развит в дальнейшем.
	update - обновляет состояние пресонажа, выполняет ряд проверок.

Класс определённого персонажа:
    Наследуется от Player. Имеет изменённый инициализатор, вследствие
    чего параметры переопределяются. Персонажи имеют разные характеристики
    и спрайты, а также оружие.

Далее представлены классы и функции интерфейса.

Класс Item:
    Предмет наделяет персонажа некоторыми бонусами. Будет в дальнейших
    обновлениях игры.

Класс Camera:
    Сдвигает все спрайты так, чтобы выбранный оказался в центре.

Класс Button:
    Наследуется от pygame.sprite.Sprite.
    Представляет из себя кнопку, которую можно разместить на экране.
    Кнопки можно нажимать.

Класс Picture:
    Наследуется от pygame.sprite.Sprite.
    Нужен только для того, чтобы можно было установить картинку на любой экран.

Класс Borders:
    Принимает величину окошка, которое оставит по центру. Остальное заполнит
    чёрным цветом. Должен вызываться каждый раз в игровом цикле с помощью draw().

Класс Bar:
    Наследуется от pygame.sprite.Sprite.
    Шкала, отображающая процент. set_fraction устанавливает степень заполненности
    (число от 0.0 до 1.0), update обновляет степень заполненности.

Функция text_object:
    Возвращает текст и его положение, принимая сам текст и его положение,
    а также его размер и цвет. Была создана для упрощения размещения надписей.

После идут функции основных экранов.

Функция menu:
    Вызывается во время игры клавишей Esc. Имеет подсказки в управлении,
    позволяет закрыть или продолжить игру. Приостанавливает игру.

Функция start_screen:
    Начальный экран. Имеет подсказки в управлении.
    Позволяет выбрать персонажа, начать игру, открыть 
    настройки или закрыть игру.

Функция end_screen:
    Экран окончания.
    Если в качестве аргумента было передано число, то выведет
    сообщение о проигрыше, указав прожитое время (число).
    Если аргументов передано не было, то поздравит игрока с победой.
    В обоих случаях продоставляет кнопку выхода.

Функция settings:
    Экран настроек.
    Позволяет изменить громкость звуков в игре.
    Для применения изменений достаточно выйти из настроек, 
    а для установки громкости перезапустить игру.

Функция upgrade_menu:
    Открывает окно улучшения персонажа. Будет расширена
    в дальнейшем (пока не используется).

Функция main:
    Инициализирует все нужные компонеты.
    Представляет основной цикл всей игры.
    Из него можно попасть только на паузу (menu).

16.01.2023